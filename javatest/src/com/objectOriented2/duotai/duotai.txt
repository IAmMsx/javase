 * 多态性
 *
 * 1. 理解多态性：可以理解为一个事物的多种i形态
    ① 实现代码的通用性
    ② object
    ③ 抽象类和接口一定体现了多态性（其不能实例化）
 * 2. 何为多态性：
 *      对象的多态性：父类的引用指向子类的对象
 *
 * 3. 多态的使用，虚拟方法的调用
 *      有了对象的多态性，编译器只能调用父类中声明的方法，运行期执行的是子类重写父类的方法
 *      总结: 编译看左边，运行看右边
 *
 * 4. 使用前提： ① 类的继承关系 ② 方法的重写
 *
 * 5. 对象的多态性：只适用于方法，不适用于属性
 *
 *
 * 重载和重写
 * ① 两者的概念
 *   重载：同类中不同形参列表的同名方法构成重载，特别的构造器可以重载，子类可以重载父类的同命不同参方法
 *   重写：首先有继承关系，子类对父类中同名同参数的方法进行覆盖操作
 * ② 重载重写的具体规则
 *
 * ③ 重载不表现为多态性  重写表现为多态性
 *    从编译运行的角度看：
      重载：对编译器来说，同名方法由于形参不同成了不同的方法，他们的调用地址在编译期就绑定了，静态绑定或者早绑定
      而对于多态，只有方法调用的时候，运行器才会确定具体要调用的方法，称为动态绑定或者晚绑定
